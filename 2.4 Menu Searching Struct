#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAKS 30

typedef struct
{
    int no;
    char nama[45];
    int nilai;
} siswa;

siswa data[MAKS];
siswa backup_sis[MAKS];
int n;

void input(siswa []);
void shell(siswa []);
void tukar(siswa *, siswa *);
void bin_search(siswa[], int);
void seq_search(siswa[], int);
void tampil(siswa []);
void menu();
void tampildata();
void backup(siswa[], siswa[]);

int main()
{
    printf("===== SEARCHING DATA STRUCT =====\n");
    printf("Banyak jumlah mahasiswa (MAKS 30): ");
    scanf("%d", &n);
    input(data);
    backup(data, backup_sis);
    do{
        menu();
    }while(1);

    return 0;
}

void menu()
{
    char pilih;
    int based;
    printf("MENU SEARCHING\n");
    printf("1. Tampilkan data\n");
    printf("2. Sequential Search\n");
    printf("3. Binary Search\n");
    printf("4. Keluar\n");
    printf("Pilih Menu : ");
    scanf("%c", &pilih);
    fflush(stdin);

    switch(pilih)
    {
    case '1' :
        tampildata();
        break;
    case '2' :
        printf("Pencarian Berdasarkan\n");
        printf("1. No\n");
        printf("2. Nama\n");
        printf("Pilihan Anda : ");
        scanf("%d", &based);
        fflush(stdin);
        seq_search(data, based);
        backup(backup_sis, data);
        break;
    case '3' :
        printf("Pencarian Berdasarkan\n");
        printf("1. No\n");
        printf("2. Nama\n");
        printf("Pilihan Anda : ");
        scanf("%d", &based);
        fflush(stdin);
        shell(data);
        bin_search(data, based);
        backup(backup_sis, data);
        break;
    case '4' :
        exit(0);
        break;
    default :
        printf("Pilih menu yang ada !\n\n");
    }

}

void input(siswa x[])
{
    int i;
    for(i=0; i<n; i++)
    {
        printf("No : ");
        scanf("%d", &x[i].no);
        fflush(stdin);
        printf("Nama : ");
        scanf("%s", &x[i].nama);
        fflush(stdin);
        printf("Nilai : ");
        scanf("%d", &x[i].nilai);
        fflush(stdin);
        puts("");
    }
}

void backup(siswa awal[MAKS], siswa hasil[MAKS])
{
    for(int i=0; i<n; i++)
        hasil[i] = awal [i];
}

void shell(siswa x[])
{
    int i, jarak, did_swap=1;
    jarak=n;
    while(jarak>1)
    {
        jarak=jarak/2;
        did_swap=1;
        while(did_swap==1)
        {
            did_swap=0;
            i=0;
            while(i<(n-jarak))
            {
                if(x[i].no > x[i+jarak].no)
                {
                    tukar(&x[i], &x[i+jarak]);
                    did_swap = 1;
                }
                i++;
            }
        }
    }
}

void tukar(siswa *x, siswa *y)
{
    siswa temp;
    temp = *x;
    *x = *y;
    *y = temp;
}

void bin_search(siswa x[], int based)
{
    int l, r, m, find=0;
    int keyNo;
    char keyNama[45];

    l=0;
    r=n-1;

    if(based==1)
    {
        printf("Nomor yang akan dicari : ");
        scanf("%d", &keyNo);
        fflush(stdin);
        while(l<=r && !find)
        {
            m = (l+r)/2;
            if(x[m].no == keyNo)
                find=1;
            else if(x[m].no < keyNo)
                l = m+1;
            else
                r=m-1;
        }
        if(find)
        {
            printf("Mahasiswa dengan no %d berada pada indeks %d\n", keyNo, m);
            printf("\nNo\tNama\tNilai\n");
            printf("%d\t%s\t%d\n",x[m].no, x[m].nama, x[m].nilai);
            puts("");
        }
        else
            printf("Mahasiswa dengan no %d TIDAK ditemukan\n", keyNo);
            puts("");
    }
    else if(based == 2)
    {
        printf("Nama yang akan dicari : ");
        gets(&keyNama);
        fflush(stdin);
        while(l<=r && !find)
        {
            m = (l+r)/2;
            if(strcmpi(x[m].nama, keyNama) == 0)
                find=1;
            else if(strcmpi(x[m].nama, keyNama) < 0)
                l = m+1;
            else
                r = m-1;
        }

        if(find)
        {
            printf("Mahasiswa dengan nama %s ditemukan pada indeks %d\n", keyNama, m);
            printf("\nNo\tNama\tNilai\n");
            printf("%d\t%s\t%d\n",x[m].no ,x[m].nama, x[m].nilai);
            puts("");
        }
        else
            printf("Mahasiswa dengan nama %s TIDAK ditemukan\n", keyNama);
            puts("");
    }
}

void seq_search(siswa x[], int based)
{
    int i=0, find=0, keyNo;
    char keyNama[45];

    if(based == 1)
    {
        printf("Nomor yang akan dicari : ");
        scanf("%d", &keyNo);
        fflush(stdin);
        while(i<n && !find)
        {
            if  (x[i].no == keyNo)
                find = 1;
            else
                i++;
        }
        if(find)
        {
            printf("Mahasiswa dengan no %d berada pada indeks %d\n", keyNo, i);
            printf("\nNo\tNama\tNilai\n");
            printf("%d\t%s\t%d\n",x[i].no, x[i].nama, x[i].nilai);
            puts("");
        }
        else
            printf("Mahasiswa dengan no %d TIDAK ditemukan\n", keyNo);
            puts("");
    }

    else if(based == 2)
    {
        printf("Nama yang akan dicari : ");
        gets(&keyNama);
        fflush(stdin);
        while(i<n && !find)
        {
            if  (strcmpi(x[i].nama, keyNama) == 0)
                find = 1;
            else
                i++;
        }

        if(find)
        {
            printf("Mahasiswa dengan nama %s berada pada indeks %d\n", keyNama, i);
            printf("\nNo\tNama\tNilai\n");
            printf("%d\t%s\t%d\n",x[i].no, x[i].nama, x[i].nilai);
            puts("");
        }
        else
            printf("Mahasiswa dengan nama %s TIDAK ditemukan\n", keyNama);
            puts("");
    }
}

void tampil(siswa x[])
{
    int i;
    printf("No\tNama\tNilai\n");
    for(i=0; i<n; i++)
        printf("%d\t%s\t%d\n", x[i].no, x[i].nama, x[i].nilai);
    puts(" ");
}

void tampildata()
{
    char bentuk;
    printf("Bentuk Data\n");
    printf("1. Tidak Terurut\n");
    printf("2. Terurut Berdasarkan No\n");
    printf("Pilihan Anda : ");
    scanf("%c", &bentuk);
    fflush(stdin);

    switch(bentuk)
    {
    case '1' :
        printf("Data Tidak Terurut : \n");
        tampil(data);
        backup(backup_sis, data);
        break;
    case '2' :
        shell(data);
        printf("Data Terurut : \n");
        tampil(data);
        backup(backup_sis, data);
        break;
    default :
        puts("Pilih bentuk data yang ada !\n\n");
        break;
    }
}
