#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAKS 10

long int t1, t2;
int C;
int n;
int data[9999999], datatemp[9999999];

void shell(int []);
void tukar(int *, int *);
void bin_search(int [], int);
void seq_search(int[], int);
void tampil(int []);
void menu();
void generate();
void copy();

int main()
{
    printf("Masukkan banyak data : ");
    scanf("%d", &n);
    fflush(stdin);
    do{
        menu();
    }while(1);

        return 0;
}

void menu(){
    int key;
    char pilih;
    do{
        generate(datatemp);
        copy(data, datatemp);
        //int A[] = {4, 2, 5, 3, 1, 9, 10, 6, 7, 8};
        //printf("Data dalam array : ");
        //tampil(data);
        puts("MENU SEARCHING");
        printf("1. Sequential Search Unsorted\n");
        printf("2. Sequential Search Sorted\n");
        printf("3. Binary Search\n");
        printf("4. Keluar\n");
        printf("Pilih menu : ");
        scanf("%c", &pilih);
        fflush(stdin);

        switch(pilih){
    case '1' :
        printf("Data yang akan dicari : ");
        scanf("%d", &key);
        fflush(stdin);
        time(&t1);
        seq_search(data, key);
        time(&t2);
        printf("Waktu komputasi yang dibutuhkan = %lds\n\n", t2-t1);
        break;
    case '2' :
        shell(data);
        //printf("Data setelah diurutkan : ");
        //tampil(data);
        printf("Data yang akan dicari : ");
        scanf("%d", &key);
        fflush(stdin);
        time(&t1);
        seq_search(data, key);
        time(&t2);
        printf("Waktu komputasi yang dibutuhkan = %lds\n\n", t2-t1);
        break;
    case '3' :
        shell(data);
        //printf("Data setelah diurutkan : ");
        //tampil(A);
        printf("Data yang akan dicari : ");
        scanf("%d", &key);
        fflush(stdin);
        time(&t1);
        bin_search(data, key);
        time(&t2);
        printf("Waktu komputasi yang dibutuhkan = %lds\n\n", t2-t1);
        break;
    default :
        puts("Pilih menu yang ada !\n");
        break;
        }
    }while(pilih==1);

}

void shell(int x[])
{
    int i, jarak, did_swap=1;
    jarak=n;
    while(jarak>1)
    {
        jarak=jarak/2;
        did_swap=1;
        while(did_swap==1)
        {
            did_swap=0;
            for(i=0; i<(n-jarak); i++)
            {
                if(x[i] > x[i+jarak])
                {
                    tukar(&x[i], &x[i+jarak]);
                    did_swap = 1;
                }
            }
        }
    }
}

void tukar(int *x, int *y)
{
    int temp;
    temp=*x;
    *x=*y;
    *y=temp;
}

void seq_search(int x[], int key)
{
    int i=0, find=0;

    while(i<n && !find){
        if(x[i] == key)
            find = 1;
        else
            i++;
        C++;
    }

    if(find)
        printf("%d berada pada indeks ke-%d\n", key, i);
    else
        printf("%d tidak ada dalam data array\n", key);
    printf("Jumlah comparison : %d\n", C);
}

void bin_search(int x[], int key)
{
    int l, r, m, find=0;

    l=0;
    r=n-1;

    while(l<=r && !find){
        m = (l+r)/2;
        if(x[m] == key)
            find=1;
        else if(x[m] < key)
            l = m+1;
        else
            r=m-1;
        C++;
    }
    if(find)
        printf("%d berada pada indeks ke-%d\n", key, m);
    else
        printf("%d tidak ada dalam data array\n", key);
    printf("Jumlah comparison : %d\n", C);
}

void tampil(int x[])
{
    int i;
    for(i=0; i<n; i++)
        printf("%d ", x[i]);
    puts(" ");
}

void generate()
{
    int i;
    srand(time(NULL));
    for(i=0; i<n; i++)
    {
        datatemp[i] = rand() /1000;
    }
}

void copy()
{
    for(int i=0; i<n; i++)
        data[i] = datatemp[i];
}

